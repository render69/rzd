datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Таблица пользователей
model User {
  id         Int      @id @default(autoincrement()) /// Уникальный идентификатор пользователя
  username   String   @unique                      /// Уникальное имя пользователя для входа
  password   String                                /// Пароль пользователя
  name       String                                /// Имя пользователя
  surname    String  @default("")                              /// Фамилия пользователя
  patronymic String  @default("")                              /// Отчество пользователя

  /// Адрес пользователя
  city       String   @default("")                             /// Город проживания
  street     String   @default("")                             /// Улица
  house      String   @default("")                             /// Номер дома
  apartment  String    @default("")                            /// Номер квартиры

  experience Int                                   /// Опыт работы (в годах)
  post       String   @default("")                             /// Должность пользователя
  
  email      String   @unique                      /// Уникальный email пользователя
  phone      String                                /// Номер телефона пользователя
  avatar     String   @default("../img/default-avatar.jpg") /// Ссылка на аватар пользователя

  /// Связи
  tasks      Task[]                                /// Задачи пользователя
  reports    Report[]                              /// Отчёты пользователя
  shifts     Shifts[]                              /// Смены пользователя
  team       Team?     @relation(fields: [teamId], references: [id]) /// Команда пользователя
  teamId     Int?                                  /// ID команды пользователя (если есть)
}

/// Таблица смен
model Shifts {
  id          Int      @id @default(autoincrement()) /// Уникальный идентификатор смены
  startTime   DateTime                              /// Время начала смены
  endTime     DateTime                              /// Время окончания смены
  type        String                                /// Тип смены (DAY или NIGHT)

  /// Связи
  tasks       Task[]                                /// Список задач в смене
  userId      Int                                   /// ID пользователя, работающего в смену
  user        User     @relation(fields: [userId], references: [id]) /// Пользователь
}

/// Таблица задач
model Task {
  id          Int      @id @default(autoincrement()) /// Уникальный идентификатор задачи
  title       String                                /// Название задачи
  description String                                /// Описание задачи
  deadline    DateTime                              /// Дедлайн задачи
  status      String                                /// Статус задачи (PENDING, IN_PROGRESS, COMPLETED)
  priority    String                                /// Приоритет задачи (LOW, MEDIUM, HIGH)

  /// Связи
  userId      Int                                   /// ID пользователя, которому назначена задача
  user        User     @relation(fields: [userId], references: [id]) /// Связь с пользователем
  shiftId     Int?                                  /// ID смены, в которой выполняется задача (если есть)
  shift       Shifts?   @relation(fields: [shiftId], references: [id]) /// Связь со сменой
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  details   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

/// Таблица отчётов
model Report {
  id         Int      @id @default(autoincrement()) /// Уникальный идентификатор отчёта
  title      String                                /// Заголовок отчёта
  content    String                                /// Содержание отчёта
  createdAt  DateTime @default(now())               /// Время создания отчёта
  updatedAt  DateTime @updatedAt                    /// Время последнего обновления отчёта
  ownerId    Int                                   /// ID пользователя, создавшего отчёт
  owner      User     @relation(fields: [ownerId], references: [id]) /// Связь с пользователем

  /// Вложения к отчёту
  attachments ReportAttachment[]                    /// Список вложений
}

/// Таблица вложений к отчётам
model ReportAttachment {
  id        Int      @id @default(autoincrement()) /// Уникальный идентификатор вложения
  filePath  String                                /// Путь к файлу вложения
  reportId  Int                                   /// ID отчёта, к которому относится вложение
  report    Report   @relation(fields: [reportId], references: [id]) /// Связь с отчётом
}

/// Таблица команд
model Team {
  id        Int      @id @default(autoincrement()) /// Уникальный идентификатор команды
  name      String                                /// Название команды
  members   User[]                                /// Участники команды
}
