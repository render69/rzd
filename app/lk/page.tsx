// app/lk/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';


interface User {
    id: number;
    username: string;
    position: string;
    avatar: string;
    name: string;
    experience: string;
    email: string;
    phone: string;
    address: string;
}

const Lk = () => {
    const [expandedIndex, setExpandedIndex] = useState<number | null>(null);

    const notifications = [
        { title: '–°–º–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', details: '–£ –≤–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–º–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å 8:00 –¥–æ 16:00.' },
        { title: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂', details: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.' },
        { title: '–°–æ–±—Ä–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞', details: '–°–æ–±—Ä–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 14:00 –≤ –∫–æ–º–Ω–∞—Ç–µ 305.' },
    ];
    const [expandedIndexes, setExpandedIndexes] = useState<number[]>([]);

    const toggleDetails = (index: number) => {
        setExpandedIndexes((prev) =>
            prev.includes(index) ? prev.filter((i) => i !== index) : [...prev, index]
        );
    };
    const [user, setUser] = useState<User | null>(null);
    const weather = {
        temp: 22,
        description: "–û–±–ª–∞—á–Ω–æ",
        humidity: 65,
        windSpeed: 5.4,
        icon: "04d",
    };

    const router = useRouter();
    const data = [
        { name: '–Ø–Ω–≤–∞—Ä—å', –∑–∞–¥–∞—á–∏: 80, —Å–º–µ–Ω—ã: 90 },
        { name: '–§–µ–≤—Ä–∞–ª—å', –∑–∞–¥–∞—á–∏: 85, —Å–º–µ–Ω—ã: 88 },
        { name: '–ú–∞—Ä—Ç', –∑–∞–¥–∞—á–∏: 90, —Å–º–µ–Ω—ã: 92 },
        { name: '–ê–ø—Ä–µ–ª—å', –∑–∞–¥–∞—á–∏: 95, —Å–º–µ–Ω—ã: 94 },
        { name: '–ú–∞–π', –∑–∞–¥–∞—á–∏: 100, —Å–º–µ–Ω—ã: 98 },
    ];
    const achievementData = [
        { name: '–Ø–Ω–≤–∞—Ä—å', achievements: 20 },
        { name: '–§–µ–≤—Ä–∞–ª—å', achievements: 40 },
        { name: '–ú–∞—Ä—Ç', achievements: 60 },
        { name: '–ê–ø—Ä–µ–ª—å', achievements: 80 },
        { name: '–ú–∞–π', achievements: 100 },
    ];
    useEffect(() => {
        const fetchUser = async () => {
            const res = await fetch('/api/user');
            if (res.ok) {
                const data = await res.json();
                setUser(data);
            } else {
                router.push('/');
            }
        };

        fetchUser();
    }, [router]);

    if (!user) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

    return (
        <div className="p-6 m-4 bg-white bg-opacity-30 backdrop-blur rounded-lg shadow-lg border-2 border-red-500">
            <div className="flex items-center mb-6 border-2 border-red-500 bg-white bg-opacity-80 backdrop-blur-lg rounded-lg shadow-md p-6">
                <div className="w-16 h-16 bg-gray-300 rounded-full flex-shrink-0">
                    {user.avatar ? (
                        <img src={user.avatar} alt="avatar" className="w-full h-full rounded-full object-cover" />
                    ) : (
                        <div className="w-full h-full bg-gray-500 rounded-full" />
                    )}
                </div>
                <div className="ml-5">
                    <h2 className="text-2xl font-bold">{user.name}</h2>
                    <p className="text-sm text-gray-600">{user.email}</p>
                    <p className="text-sm text-gray-600">–†–æ–ª—å: {user.position}</p>
                </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white bg-opacity-80 backdrop-blur-lg rounded-lg shadow-md p-6 border-2 border-red-500">
                    <h2 className="text-xl font-semibold text-red-600">–°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ —Å–º–µ–Ω–∞</h2>
                    <p className="text-gray-700">–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞</p>
                    <button className="mt-4 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                </div>

                <div className="bg-white bg-opacity-80 backdrop-blur-lg rounded-lg shadow-md p-6 border-2 border-red-500">
                    <h2 className="text-xl font-semibold text-red-600">–í–∞—à–∏ –∑–∞–¥–∞—á–∏</h2>
                    <p className="text-gray-700">3 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</p>
                    <Link href="/lk/tasks">
                        <button className="mt-4 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                            –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏
                        </button>
                    </Link>
                </div>
            </div>
            <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white bg-opacity-80 backdrop-blur-lg rounded-lg shadow-md p-6 border-2 border-red-500 flex justify-between items-center">
                    <div>
                        <h2 className="text-xl font-semibold text-red-600">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
                        <ul className="list-disc list-inside text-gray-700">
                            <li>–ü–æ—Å–µ—Ç–∏–ª 100 —Å–º–µ–Ω</li>
                            <li>–í—ã–ø–æ–ª–Ω–∏–ª 200 –∑–∞–¥–∞—á</li>
                            <li>–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ 10 —Ç—Ä–µ–Ω–∏–Ω–≥–∞—Ö –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
                            <li>–ü–æ–ª—É—á–∏–ª 5 –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞</li>
                            <li>–°–¥–∞–ª –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –Ω–∞ 95%</li>
                        </ul>
                        <button className="mt-4 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                    </div>
                    <div className="w-1/2">
                        <LineChart width={300} height={200} data={achievementData}>
                            <XAxis dataKey="name" stroke="#8884d8" />
                            <YAxis />
                            <CartesianGrid stroke="#ccc" strokeDasharray="5 5" />
                            <Tooltip />
                            <Legend />
                            <Line type="monotone" dataKey="achievements" stroke="#82ca9d" />
                        </LineChart>
                    </div>
                </div>

                <div className="bg-white bg-opacity-80 backdrop-blur-lg rounded-lg shadow-md p-6 border-2 border-red-500 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-6">
                    <div className="flex-1">
                        <h2 className="text-xl font-semibold text-red-600">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                        <p className="text-gray-700">–ó–∞–¥–∞—á–∏: 80% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
                        <p className="text-gray-700">–°–º–µ–Ω—ã: 90% –ø–æ—Å–µ—â–µ–Ω–æ</p>
                        <div className="bg-gray-100 p-4 rounded-md mt-4">
                            <h3 className="font-semibold text-gray-800">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                            <ul className="list-disc pl-5">
                                <li>–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ü–µ–ª–æ–º –∏–¥–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É.</li>
                                <li>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: 25.</li>
                                <li>–ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é: –ø–æ–≤—ã—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.</li>
                            </ul>
                        </div>
                    </div>
                    <div className="flex-shrink-0">
                        <LineChart width={400} height={300} data={data}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="name" />
                            <YAxis />
                            <Tooltip />
                            <Legend />
                            <Line type="monotone" dataKey="–∑–∞–¥–∞—á–∏" stroke="#8884d8" />
                            <Line type="monotone" dataKey="—Å–º–µ–Ω—ã" stroke="#82ca9d" />
                        </LineChart>
                    </div>
                </div>
            </div>

            <div className="mt-8 bg-white bg-opacity-80 backdrop-blur-lg rounded-lg shadow-md p-4 border-2 border-red-500">
                <div className="mb-4 text-center">
                    <h3 className="border-b border-red-500 text-xl font-semibold text-red-600">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                </div>
                <ul className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                    {notifications.map((note, index) => (
                        <li
                            key={index}
                            className="bg-white rounded-lg shadow border-2 border-red-400 p-3 hover:shadow-lg transition-all duration-200 text-sm"
                        >
                            <div className="flex flex-col gap-2">
                                <button
                                    onClick={() => toggleDetails(index)}
                                    className="text-left text-gray-700 font-medium hover:bg-gray-300 bg-gray-200 rounded-lg px-2 py-1"
                                >
                                    üìå {note.title}
                                </button>
                                {expandedIndexes.includes(index) && (
                                    <p className="text-gray-600 text-sm">{note.details}</p>
                                )}
                                <div className="flex justify-end gap-2">
                                    <button className='bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs font-medium'>‚úî</button>
                                    <button className='bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium'>üëÅÔ∏è</button>
                                    <button className='bg-red-600 hover:bg-red-700 text-white px-2 py-1 rounded text-xs font-medium'>‚úñ</button>
                                </div>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

export default Lk;
