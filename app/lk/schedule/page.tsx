'use client';

import Link from 'next/link';
import { useState } from 'react';

interface Shift {
    id: number;
    date: string;
    startTime: string;
    endTime: string;
    type: '–î–Ω–µ–≤–Ω–∞—è' | '–ù–æ—á–Ω–∞—è';
    status: '–¢–µ–∫—É—â–∞—è' | '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' | '–ü—Ä–æ—à–µ–¥—à–∞—è';
}

const ShiftCard = ({ shift }: { shift: Shift }) => {
    return (
        <div className="p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow border-2 border-red-500 transform hover:scale-105">
            <div className="flex items-center mb-4">
                <span className={`mr-3 text-4xl ${shift.type === '–î–Ω–µ–≤–Ω–∞—è' ? 'text-yellow-500' : 'text-blue-500'}`}>
                    {shift.type === '–î–Ω–µ–≤–Ω–∞—è' ? '‚òÄÔ∏è' : 'üåô'}
                </span>
                <div>
                    <p className="text-xl font-semibold">{shift.date}</p>
                    <p className="text-sm text-gray-500">{shift.startTime} - {shift.endTime}</p>
                </div>
            </div>
            <div className="text-gray-700">
                <p>–¢–∏–ø: <span className={`font-medium ${shift.type === '–î–Ω–µ–≤–Ω–∞—è' ? 'text-yellow-500' : 'text-blue-500'}`}>{shift.type}</span></p>
                <p>–°—Ç–∞—Ç—É—Å: <span className={`font-medium ${shift.status === '–¢–µ–∫—É—â–∞—è' ? 'text-red-600' : shift.status === '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' ? 'text-green-600' : 'text-gray-500'}`}>{shift.status}</span></p>
            </div>
        </div>
    );
};

const SchedulePage = () => {
    const [filterStatus, setFilterStatus] = useState<'–í—Å–µ' | '–¢–µ–∫—É—â–∞—è' | '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' | '–ü—Ä–æ—à–µ–¥—à–∞—è'>('–í—Å–µ');
    const [filterType, setFilterType] = useState<'–í—Å–µ' | '–î–Ω–µ–≤–Ω–∞—è' | '–ù–æ—á–Ω–∞—è'>('–í—Å–µ');

    const testShifts: Shift[] = [
        { id: 1, date: '2025-06-18', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–¢–µ–∫—É—â–∞—è' },
        { id: 2, date: '2025-06-16', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 3, date: '2025-06-17', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 4, date: '2025-06-18', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 5, date: '2025-06-19', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 6, date: '2025-06-14', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–æ—à–µ–¥—à–∞—è' },
        { id: 7, date: '2025-06-13', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–æ—à–µ–¥—à–∞—è' },
        { id: 8, date: '2025-06-12', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–æ—à–µ–¥—à–∞—è' },
        { id: 9, date: '2025-06-20', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 10, date: '2025-06-21', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 11, date: '2025-06-22', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 12, date: '2025-06-23', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 13, date: '2025-06-24', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 14, date: '2025-06-25', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 15, date: '2025-06-26', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 16, date: '2025-06-27', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 17, date: '2025-06-28', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 18, date: '2025-06-29', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 19, date: '2025-06-30', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 20, date: '2025-07-01', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 21, date: '2025-07-02', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 22, date: '2025-07-03', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 23, date: '2025-07-04', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 24, date: '2025-07-05', startTime: '20:00', endTime: '08:00', type: '–ù–æ—á–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
        { id: 25, date: '2025-07-06', startTime: '08:00', endTime: '20:00', type: '–î–Ω–µ–≤–Ω–∞—è', status: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' },
    ];

    const filteredShifts = testShifts
        .filter(shift => (filterStatus === '–í—Å–µ' || shift.status === filterStatus) && (filterType === '–í—Å–µ' || shift.type === filterType));

    return (
        <div className="p-6 m-4 bg-white bg-opacity-50 backdrop-blur rounded-lg shadow-lg border-2 border-red-500">
            <div className="p-1 bg-white bg-opacity-90 rounded-lg mb-4 text-center border-2 border-red-500">
                <h1 className="text-3xl font-semibold text-red-500">–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω</h1>
            </div>


            {/* –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–º–µ–Ω */}
            <div className="m-4 text-center space-x-4">
                <select
                    className="bg-white border-2 border-red-500 rounded-lg p-2"
                    onChange={(e) => setFilterStatus(e.target.value as '–í—Å–µ' | '–¢–µ–∫—É—â–∞—è' | '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è' | '–ü—Ä–æ—à–µ–¥—à–∞—è')}
                    value={filterStatus}
                >
                    <option value="–í—Å–µ">–í—Å–µ —Å–º–µ–Ω—ã</option>
                    <option value="–¢–µ–∫—É—â–∞—è">–¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞</option>
                    <option value="–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–º–µ–Ω—ã</option>
                    <option value="–ü—Ä–æ—à–µ–¥—à–∞—è">–ü—Ä–æ—à–µ–¥—à–∏–µ —Å–º–µ–Ω—ã</option>
                </select>
                <select
                    className="bg-white border-2 border-red-500 rounded-lg p-2"
                    onChange={(e) => setFilterType(e.target.value as '–í—Å–µ' | '–î–Ω–µ–≤–Ω–∞—è' | '–ù–æ—á–Ω–∞—è')}
                    value={filterType}
                >
                    <option value="–í—Å–µ">–í—Å–µ —Ç–∏–ø—ã —Å–º–µ–Ω</option>
                    <option value="–î–Ω–µ–≤–Ω–∞—è">–î–Ω–µ–≤–Ω—ã–µ —Å–º–µ–Ω—ã</option>
                    <option value="–ù–æ—á–Ω–∞—è">–ù–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã</option>
                </select>
            </div>

            {/* –¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞ */}
            {testShifts.some(shift => shift.status === '–¢–µ–∫—É—â–∞—è') && (
                <div className="mb-6 p-4 bg-opacity-90 bg-red-100 rounded-lg shadow border-2 border-red-500">
                    <h2 className="text-xl font-medium mb-2">–¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞</h2>
                    {testShifts.filter(shift => shift.status === '–¢–µ–∫—É—â–∞—è').map(shift => (
                        <ShiftCard key={shift.id} shift={shift} />
                    ))}
                    <Link href="/lk/tasks">
                        <button className="mt-4 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors">
                            –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
                        </button>
                    </Link>
                </div>
            )}

            {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredShifts.length > 0 ? (
                    filteredShifts.map(shift => (
                        <ShiftCard key={shift.id} shift={shift} />
                    ))
                ) : (
                    <p className="text-center text-gray-600">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.</p>
                )}
            </div>
        </div>
    );
};

export default SchedulePage;

