datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  name       String
  position   String
  experience String
  email      String   @unique
  phone      String
  address    String
  avatar     String   @default("../img/default-avatar.jpg")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Обратные связи
  enrollments      Enrollment[]
  teamsAsMember    Team[]       @relation("TeamMembers")
  teamsAsLeader    Team[]       @relation("TeamLeader")
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  shifts           Shift[] // Новая обратная связь
  tasks            Task[] // Новая обратная связь
  reports          Report[] // Новая обратная связь
}

model Shift {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  startTime   DateTime
  endTime     DateTime
  description String
  tasks       Task[] // Связь с задачами в рамках смены
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  assignedTo  User     @relation(fields: [userId], references: [id])
  userId      Int
  shift       Shift?   @relation(fields: [shiftId], references: [id])
  shiftId     Int?
  deadline    DateTime
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Report {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instruction {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingCourse {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
}

model Enrollment {
  id         Int            @id @default(autoincrement())
  user       User           @relation(fields: [userId], references: [id])
  userId     Int
  course     TrainingCourse @relation(fields: [courseId], references: [id])
  courseId   Int
  progress   Float          @default(0.0) // Процент завершения курса
  completed  Boolean        @default(false)
  enrolledAt DateTime       @default(now())
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  members   User[]   @relation("TeamMembers")
  leader    User     @relation("TeamLeader", fields: [leaderId], references: [id])
  leaderId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int       @id @default(autoincrement())
  content    String
  sender     User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  sentAt     DateTime  @default(now())
  readAt     DateTime?
}
